#define PIN_LED  9
#define PIN_TRIG 12   // sonar sensor TRIGGER
#define PIN_ECHO 13   // sonar sensor ECHO

#define SND_VEL 346.0     // sound velocity at 24 celsius degree (unit: m/sec)
#define INTERVAL 25       // sampling interval (unit: msec)
#define PULSE_DURATION 10 // ultra-sound Pulse Duration (unit: usec)
#define _DIST_MIN 100.0   // minimum distance (LED OFF)
#define _DIST_MAX 300.0   // maximum distance (LED OFF)

#define TIMEOUT ((INTERVAL / 2) * 1000.0)   // maximum echo waiting time (unit: usec)
#define SCALE (0.001 * 0.5 * SND_VEL)       // coefficent to convert duration to distance

#define ACTIVE_HIGH 0    

unsigned long last_sampling_time;   // unit: msec

int duty_from_mm(float mm) {
  const float PEAK = 200.0;  // 최대 밝기 지점

  if (mm <= _DIST_MIN) return 255;  // 100mm 이하: 꺼짐
  if (mm >= _DIST_MAX) return 255;  // 300mm 이상: 꺼짐
  if (mm == PEAK) return 0;         // 200mm: 최대 밝기

  if (mm < PEAK) {
    // 100 → 200mm : 255 → 0
    float r = (mm - _DIST_MIN) / (PEAK - _DIST_MIN);
    return (int)(255.0 * (1.0 - r) + 0.5);
  } else {
    // 200 → 300mm : 0 → 255
    float r = (mm - PEAK) / (_DIST_MAX - PEAK);
    return (int)(255.0 * r + 0.5);
  }
}

void setup() {
  pinMode(PIN_LED, OUTPUT);
  pinMode(PIN_TRIG, OUTPUT);
  pinMode(PIN_ECHO, INPUT);
  digitalWrite(PIN_TRIG, LOW);

  Serial.begin(57600);
}

void loop() {
  if (millis() < (last_sampling_time + INTERVAL)) return;

  float distance = USS_measure(PIN_TRIG, PIN_ECHO);

  bool in_range = (distance >= _DIST_MIN) && (distance <= _DIST_MAX);

  int duty;
  if (!in_range) {
    duty = (ACTIVE_HIGH ? 0 : 255);
  } else {
    int d = duty_from_mm(distance);
    duty = (ACTIVE_HIGH ? (255 - d) : d);
  }

  analogWrite(PIN_LED, duty);

  Serial.print("Min:");   Serial.print(_DIST_MIN);
  Serial.print(",distance:"); Serial.print(distance);
  Serial.print(",duty:"); Serial.print(duty);
  Serial.print(",Max:");  Serial.print(_DIST_MAX);
  Serial.println();

  last_sampling_time += INTERVAL;
}
float USS_measure(int TRIG, int ECHO) {
  digitalWrite(TRIG, HIGH);
  delayMicroseconds(PULSE_DURATION);
  digitalWrite(TRIG, LOW);
  
  return pulseIn(ECHO, HIGH, (unsigned long)TIMEOUT) * SCALE;
}
